For this, make below changes- 

Also, the table should have one more column - bulb icon blinking (ever 0.5 or 1 second) (in red color) only if it is unsafe, and bulb should not be blinking if its safe. Also a buzzer sound should be played when there is unsafe esd status and not buzz when its safe

also a single button "connect" below to connect all devices on the network, and remove the "connect" button present in the table's actions 

Do not change anything else

app.py - 

import json
import socket
import threading
from flask import Flask, render_template, jsonify, request

app = Flask(__name__)

# Dictionary to store device data
devices = {}

BUFFER_SIZE = 1028

def handle_device_connection(ip, port):
    """Connect to the hardware's TCP server and receive data."""
    global devices

    while True:
        try:
            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            client_socket.connect((ip, port))

            while True:
                data = client_socket.recv(BUFFER_SIZE).decode('utf-8').strip()
                if data:
                    print(f"Received data from {ip}:{port} - {data}")
                    # Process the received data
                    if "Band connected" in data or "Band disconnected" in data:
                        devices[ip]['BAND_STATUS'] = 1 if "Band connected" in data else 0
                    elif "Mat connected" in data or "Mat disconnected" in data:
                        devices[ip]['MAT_STATUS'] = 1 if "Mat connected" in data else 0

                    # Update ESD status
                    esd_status = "Safe" if devices[ip].get('BAND_STATUS') == 1 and devices[ip].get('MAT_STATUS') == 1 else "Unsafe"
                    devices[ip]['ESD_STATUS'] = esd_status

        except Exception as e:
            print(f"Error with {ip}:{port} - {e}")
        finally:
            client_socket.close()

@app.route('/')
def index():
    return render_template('final.html')

@app.route('/data')
def get_data():
    return jsonify(devices)

@app.route('/add_device', methods=['POST'])
def add_device():
    """Add a new device by IP and Port."""
    global devices
    ip = request.form.get('device_ip')
    port = int(request.form.get('device_port'))

    if ip and port:
        devices[ip] = {
            'BAND_STATUS': 0,
            'MAT_STATUS': 0,
            'ESD_STATUS': 'Unsafe'
        }
        threading.Thread(target=handle_device_connection, args=(ip, port), daemon=True).start()
        return jsonify({"message": f"Device {ip}:{port} added successfully!"}), 200
    else:
        return jsonify({"error": "Device IP and Port are required!"}), 400

@app.route('/remove_device/<device_ip>', methods=['DELETE'])
def remove_device(device_ip):
    """Remove a device by IP."""
    global devices
    if device_ip in devices:
        del devices[device_ip]
        return jsonify({"message": f"Device {device_ip} removed successfully!"}), 200
    else:
        return jsonify({"error": "Device not found!"}), 404

@app.route('/connect_device/<device_ip>', methods=['POST'])
def connect_device(device_ip):
    """Connect to a device by IP."""
    global devices
    if device_ip in devices:
        # Start connection handling thread
        threading.Thread(target=handle_device_connection, args=(device_ip, devices[device_ip]['port']), daemon=True).start()
        return jsonify({"message": f"Device {device_ip} connected successfully!"}), 200
    else:
        return jsonify({"error": "Device not found!"}), 404

if __name__ == '__main__':
    # Start Flask app
    app.run(debug=True)


final.html - 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Device Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: background-color 0.3s, color 0.3s;
        }

        body.light-mode {
            background-color: #f4f4f4;
            color: #333;
        }

        body.dark-mode {
            background-color: #333;
            color: #f4f4f4;
        }

        h1 {
            margin-bottom: 20px;
            font-size: 2rem;
            color: inherit;
        }

        .timer {
            margin-bottom: 20px;
            font-size: 1.2em;
            font-weight: bold;
        }

        table {
            width: 100%;
            max-width: 800px;
            background-color: inherit;
            border-collapse: collapse;
            margin-top: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            overflow: hidden;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #007bff;
            color: white;
        }

        tr:hover {
            background-color: #f1f1f1;
        }

        .status-button {
            padding: 5px 10px;
            color: white;
            border: none;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
        }

        .remove-button, .connect-button {
            padding: 5px 10px;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
        }
        
        .remove-button {
            background-color: red;
        }

        .connect-button {
            background-color: green;
        }

        .green {
            background-color: #28a745;
        }

        .red {
            background-color: #dc3545;
        }

        .toggle-container {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            align-items: center;
        }

        .toggle-label {
            margin-right: 10px;
            color: inherit;
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            border-radius: 50%;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
        }

        input:checked + .slider {
            background-color: #007bff;
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        .form-container {
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 800px;
        }

        .form-container label {
            margin: 5px 0;
            font-weight: bold;
        }

        .form-container input {
            padding: 10px;
            margin: 5px 0;
            width: 100%;
            max-width: 300px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .form-container button {
            padding: 10px 20px;
            margin-top: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            font-size: 1rem;
        }

        .form-container button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body class="light-mode">
    <div class="toggle-container">
        <label class="toggle-label">Dark Mode</label>
        <label class="toggle-switch">
            <input type="checkbox" id="mode-toggle">
            <span class="slider"></span>
        </label>
    </div>
    <h1>ESD Device Dashboard</h1>
    <div class="timer" id="timer"></div>
    <br/>
    <div class="form-container">
        <form id="add-device-form">
            <label for="device_ip">Device IP Address:</label>
            <input type="text" id="device_ip" name="device_ip" required>
            <br/>
            <label for="device_port">Device Port:</label>
            <input type="text" id="device_port" name="device_port" required>
            <button type="submit">Add Device</button>
        </form>
    </div>
    <table>
        <thead>
            <tr>
                <th>Device</th>
                <th>MAT STATUS</th>
                <th>BAND STATUS</th>
                <th>ESD Device Safety</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="device-data">
            <!-- Data will be populated here -->
        </tbody>
    </table>

    <script>
        function updateTimer() {
            const timerElement = document.getElementById('timer');
            const now = new Date();
            const timeString = now.toLocaleTimeString('en-US', { hour12: false });
            const dateString = now.toLocaleDateString();
            timerElement.textContent = `${dateString} - ${timeString}`;
        }

        setInterval(updateTimer, 1000);
        updateTimer();  

        function fetchData() {
            fetch('/data')
                .then(response => response.json())
                .then(data => {
                    const tbody = document.getElementById('device-data');
                    tbody.innerHTML = ''; // Clear existing rows

                    for (const [device, status] of Object.entries(data)) {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${device}</td>
                            <td><button class="status-button ${status.MAT_STATUS ? 'green' : 'red'}">${status.MAT_STATUS}</button></td>
                            <td><button class="status-button ${status.BAND_STATUS ? 'green' : 'red'}">${status.BAND_STATUS}</button></td>
                            <td>${status.MAT_STATUS && status.BAND_STATUS ? 'Safe' : 'Unsafe'}</td>
                            <td>
                                <button class="remove-button" onclick="removeDevice('${device}')">Remove</button>
                                <button class="connect-button" onclick="connectDevice('${device}')">Connect</button>
                            </td>
                        `;

                        tbody.appendChild(row);
                    }
                })
                .catch(error => console.error("Error fetching data:", error));
        }

        setInterval(fetchData, 500);
        fetchData();

        document.getElementById('add-device-form').addEventListener('submit', function(event) {
            event.preventDefault(); 
            const formData = new FormData(this);

            fetch('/add_device', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(result => {
                if (result.message) {
                    alert(result.message);
                    fetchData(); 
                } else if (result.error) {
                    alert(result.error);
                }
            })
            .catch(error => console.error("Error adding device:", error));
        });

        function removeDevice(device) {
            fetch(`/remove_device/${device}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(result => {
                if (result.message) {
                    alert(result.message);
                    fetchData();
                } else if (result.error) {
                    alert(result.error);
                }
            })
            .catch(error => console.error("Error removing device:", error));
        }

        function connectDevice(device) {
            fetch(`/connect_device/${device}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(result => {
                if (result.message) {
                    alert(result.message);
                    fetchData();
                } else if (result.error) {
                    alert(result.error);
                }
            })
            .catch(error => console.error("Error connecting device:", error));
        }

        function toggleMode() {
            const body = document.body;
            if (body.classList.contains('light-mode')) {
                body.classList.remove('light-mode');
                body.classList.add('dark-mode');
            } else {
                body.classList.remove('dark-mode');
                body.classList.add('light-mode');
            }
        }

        document.getElementById('mode-toggle').addEventListener('change', toggleMode);
    </script>
</body>
</html>